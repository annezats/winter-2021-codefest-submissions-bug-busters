{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/mming/Desktop/winter-2021-codefest-submissions-bug-busters/app/components/Timer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar Timer = function (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer() {\n    _classCallCheck(this, Timer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Timer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var NewTimer = function NewTimer(props) {\n        var _useState = useState(\"Hasn't started\"),\n            _useState2 = _slicedToArray(_useState, 2),\n            timeLeft = _useState2[0],\n            setTimeLeft = _useState2[1];\n\n        var i = 0;\n        var then = props.newtime[i] * 60 * 1000 + Date.now();\n        useEffect(function () {\n          var x = setInterval(function () {\n            var now = new Date().getTime();\n            var difference = then - now;\n            var days = Math.floor(difference / (1000 * 60 * 60 * 24));\n            var hours = Math.floor(difference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n            var minutes = Math.floor(difference % (1000 * 60 * 60) / (1000 * 60));\n            var seconds = Math.floor(difference % (1000 * 60) / 1000);\n            setTimeLeft(days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \");\n\n            if (difference < 0) {\n              if (i == props.newtime.length - 1) {\n                clearInterval(x);\n                setTimeLeft(\"done\");\n              } else {\n                i++;\n                then = props.newtime[i] * 60 * 1000 + Date.now();\n                setTimeLeft(\"switch what you are doing\");\n              }\n            }\n          }, 1000);\n          return function () {\n            return clearInterval(x);\n          };\n        }, []);\n        return React.createElement(Text, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 9\n          }\n        }, timeLeft);\n      };\n\n      var TimerSetup = function TimerSetup(props) {\n        var _useState3 = useState(0),\n            _useState4 = _slicedToArray(_useState3, 2),\n            getTime = _useState4[0],\n            setTime = _useState4[1];\n\n        return React.createElement(React.Fragment, null, React.createElement(Text, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 9\n          }\n        }, \" Timer from now to \", props.time, \" \"), React.createElement(Button, {\n          onPress: function onPress() {\n            setTime(props.time);\n          },\n          disabled: Boolean(getTime),\n          title: getTime ? \"happy studying:)\" : \"Click to start\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 9\n          }\n        }));\n      };\n\n      var newtime1 = new Date(\"Jan 4, 2021 21:00:00\");\n      var timearray = [0.1, 0.1, 0.1];\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, React.createElement(TimerSetup, {\n        time: newtime1.toLocaleString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }), React.createElement(NewTimer, {\n        newtime: timearray,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }), React.createElement(StatusBar, {\n        style: \"auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nTimer.navigationOptions = {\n  title: 'Timer'\n};\nexport { Timer as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/mming/Desktop/winter-2021-codefest-submissions-bug-busters/app/components/Timer.js"],"names":["StatusBar","React","useState","useEffect","Timer","NewTimer","props","timeLeft","setTimeLeft","i","then","newtime","Date","now","x","setInterval","getTime","difference","days","Math","floor","hours","minutes","seconds","length","clearInterval","TimerSetup","setTime","time","Boolean","newtime1","timearray","styles","container","toLocaleString","Component","navigationOptions","title","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { Button, StyleSheet, Text, View } from 'react-native';\n\nexport default class Timer extends React.Component{\n    static navigationOptions = {title: 'Timer'};\n\n    render(){const NewTimer =(props)=>{\n    const [timeLeft, setTimeLeft]= useState(\"Hasn't started\"); //initializes timer text\n    var i=0 //counter of number of sessions\n    var then= props.newtime[i]*60*1000+Date.now() //finds end of first timer time (in milliseconds)\n    useEffect(()=>{ //function that repeats every second\n        var x = setInterval(()=>{ //calculates how much time is left\n\n        var now = new Date().getTime();\n        var difference = then-now;\n\n        var days = Math.floor(difference / (1000 * 60 * 60 * 24));\n        var hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        var minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        var seconds = Math.floor((difference % (1000 * 60)) / 1000);\n        setTimeLeft(days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \");\n\n        if (difference<0){ //when timer ends\n            if (i== props.newtime.length-1){\n            clearInterval(x);\n            setTimeLeft(\"done\");\n            }\n            else{ \n            i++;\n            then= props.newtime[i]*60*1000+Date.now() //resets timer\n            setTimeLeft(\"switch what you are doing\")\n            //insert push notification here\n            }\n        }\n\n        },1000); //the 1000 is what makes it repeat every second\n        return () => clearInterval(x);\n    },[]);\n\n    return(\n        <Text>{timeLeft}</Text>\n    )\n    }\n\n    //creates some text and a button\n    const TimerSetup = (props) => {\n    const [getTime, setTime]= useState(0);\n    return(\n        <>\n        <Text> Timer from now to {props.time} </Text>\n        <Button\n        onPress={()=>{\n            //insert make the button actually start the timer\n            setTime(props.time);\n\n        }}\n        disabled={Boolean(getTime)}\n        title={getTime ? \"happy studying:)\" : \"Click to start\"}\n        />\n        </>\n    );}\n    \n    var newtime1 = new Date(\"Jan 4, 2021 21:00:00\"); //9pm today\n    var timearray=[0.1,0.1,0.1] //change this array to Matthew's \n    return (\n      <View style={styles.container}>\n        <TimerSetup time={newtime1.toLocaleString()}/>\n        <NewTimer newtime={timearray}/>\n        <StatusBar style=\"auto\" />\n      </View>\n    );}\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  });\n"]},"metadata":{},"sourceType":"module"}
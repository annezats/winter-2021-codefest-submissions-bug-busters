{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Timer.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar Timer = function (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer() {\n    _classCallCheck(this, Timer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Timer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$navigatio = this.props.navigation,\n          navigate = _this$props$navigatio.navigate,\n          state = _this$props$navigatio.state;\n      var listoftimes = state.params.listoftimes.map(function (min) {\n        return min * 60;\n      });\n      var end = Date.now();\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }\n      }, \" Study session until \", end.toLocaleString(), \" \"), React.createElement(NewTimer, {\n        listoftimes: listoftimes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Before you start, make a to do list!\",\n        onPress: function onPress() {\n          return navigate('Checklist');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      }), React.createElement(StatusBar, {\n        style: \"auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nTimer.navigationOptions = {\n  title: 'Timer'\n};\nexport { Timer as default };\n\nvar NewTimer = function NewTimer(props) {\n  var timertext = \"  \";\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      buttonClicked = _useState2[0],\n      setButtonClicked = _useState2[1];\n\n  var _useState3 = useState(timertext),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeLeft = _useState4[0],\n      setTimeLeft = _useState4[1];\n\n  var i = 0;\n  var seconds = props.listoftimes[i];\n  useEffect(function () {\n    var x = setInterval(function () {\n      if (buttonClicked) {\n        if (seconds < 0) {\n          if (i == props.listoftimes.length - 1) {\n            clearInterval(x);\n            timertext = \"done\";\n          } else {\n            i++;\n            seconds = props.listoftimes[i];\n            timertext = \"switch what you are doing\";\n          }\n        } else {\n          timertext = timeLeftCalculator(seconds);\n        }\n\n        seconds--;\n      } else if (timertext == \"Hasn't Started\") {\n        timertext = \" \";\n      }\n\n      setTimeLeft(timertext);\n    }, 1000);\n    return function () {\n      return clearInterval(x);\n    };\n  }, [buttonClicked]);\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    onPress: function onPress() {\n      setButtonClicked(!buttonClicked);\n    },\n    disabled: buttonClicked,\n    title: buttonClicked ? \"Pause\" : \"Start\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, timeLeft, \" \"));\n};\n\nvar ProgressBar = function ProgressBar(props) {\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      numSections = _useState6[0],\n      setNumSections = _useState6[1];\n\n  return React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, numSections, \" done! \");\n};\n\nfunction timeLeftCalculator(seconds) {\n  var days = Math.floor(seconds / (60 * 60 * 24));\n  var hours = Math.floor(seconds % (60 * 60 * 24) / (60 * 60));\n  var minutes = Math.floor(seconds % (60 * 60) / 60);\n  var secs = Math.floor(seconds % 60);\n  var timertext = days + \"d \" + hours + \"h \" + minutes + \"m \" + secs + \"s \";\n  return timertext;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Timer.js"],"names":["StatusBar","React","useState","useEffect","Timer","props","navigation","navigate","state","listoftimes","params","map","min","end","Date","now","styles","container","toLocaleString","Component","navigationOptions","title","NewTimer","timertext","buttonClicked","setButtonClicked","timeLeft","setTimeLeft","i","seconds","x","setInterval","length","clearInterval","timeLeftCalculator","ProgressBar","numSections","setNumSections","days","Math","floor","hours","minutes","secs","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;IAGqBC,K;;;;;;;;;;;;;6BAET;AAAA,kCACqB,KAAKC,KAAL,CAAWC,UADhC;AAAA,UACEC,QADF,yBACEA,QADF;AAAA,UACYC,KADZ,yBACYA,KADZ;AAEN,UAAIC,WAAW,GAACD,KAAK,CAACE,MAAN,CAAaD,WAAb,CAAyBE,GAAzB,CAA6B,UAAAC,GAAG;AAAA,eAAEA,GAAG,GAAC,EAAN;AAAA,OAAhC,CAAhB;AACA,UAAIC,GAAG,GAAEC,IAAI,CAACC,GAAL,EAAT;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAA4BJ,GAAG,CAACK,cAAJ,EAA5B,MADA,EAEA,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAET,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,EAGA,oBAAC,MAAD;AACG,QAAA,KAAK,EAAE,sCADV;AAEG,QAAA,OAAO,EAAE;AAAA,iBAAMF,QAAQ,CAAC,WAAD,CAAd;AAAA,SAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,EAQA,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARA,CADF;AAYD;;;;EAlB8BN,KAAK,CAACkB,S;;AAApBf,K,CACVgB,iB,GAAoB;AAACC,EAAAA,KAAK,EAAE;AAAR,C;SADVjB,K;;AAsBrB,IAAMkB,QAAQ,GAAE,SAAVA,QAAU,CAACjB,KAAD,EAAS;AACvB,MAAIkB,SAAS,GAAG,IAAhB;;AADuB,kBAEmBrB,QAAQ,CAAC,KAAD,CAF3B;AAAA;AAAA,MAEhBsB,aAFgB;AAAA,MAEDC,gBAFC;;AAAA,mBAGQvB,QAAQ,CAACqB,SAAD,CAHhB;AAAA;AAAA,MAGhBG,QAHgB;AAAA,MAGNC,WAHM;;AAMvB,MAAIC,CAAC,GAAC,CAAN;AACA,MAAIC,OAAO,GAAExB,KAAK,CAACI,WAAN,CAAkBmB,CAAlB,CAAb;AAEAzB,EAAAA,SAAS,CAAC,YAAI;AAAE,QAAI2B,CAAC,GAAGC,WAAW,CAAC,YAAI;AAClC,UAAIP,aAAJ,EAAkB;AAChB,YAAIK,OAAO,GAAC,CAAZ,EAAc;AACV,cAAID,CAAC,IAAGvB,KAAK,CAACI,WAAN,CAAkBuB,MAAlB,GAAyB,CAAjC,EAAmC;AACjCC,YAAAA,aAAa,CAACH,CAAD,CAAb;AACAP,YAAAA,SAAS,GAAC,MAAV;AACD,WAHD,MAII;AACFK,YAAAA,CAAC;AACDC,YAAAA,OAAO,GAAExB,KAAK,CAACI,WAAN,CAAkBmB,CAAlB,CAAT;AACAL,YAAAA,SAAS,GAAC,2BAAV;AAED;AACF,SAXH,MAYI;AACFA,UAAAA,SAAS,GAACW,kBAAkB,CAACL,OAAD,CAA5B;AACD;;AACDA,QAAAA,OAAO;AACR,OAjBD,MAkBK,IAAIN,SAAS,IAAE,gBAAf,EAAgC;AACnCA,QAAAA,SAAS,GAAC,GAAV;AACD;;AACDI,MAAAA,WAAW,CAACJ,SAAD,CAAX;AACD,KAvB8B,EAuB7B,IAvB6B,CAAnB;AAwBd,WAAO;AAAA,aAAMU,aAAa,CAACH,CAAD,CAAnB;AAAA,KAAP;AAA+B,GAxBxB,EAwByB,CAACN,aAAD,CAxBzB,CAAT;AA+BA,SACE,0CACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,mBAAI;AACXC,MAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD,KAHH;AAIE,IAAA,QAAQ,EAAEA,aAJZ;AAKE,IAAA,KAAK,EAAEA,aAAa,GAAG,OAAH,GAAa,OALnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,QAAP,MARF,CADF;AAYD,CApDD;;AAsDA,IAAMS,WAAW,GAAC,SAAZA,WAAY,CAAC9B,KAAD,EAAS;AAAA,mBACYH,QAAQ,CAAC,CAAD,CADpB;AAAA;AAAA,MAClBkC,WADkB;AAAA,MACLC,cADK;;AAEzB,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,WAAP,YADF;AAGD,CALD;;AAOA,SAASF,kBAAT,CAA4BL,OAA5B,EAAoC;AAClC,MAAIS,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWX,OAAO,IAAK,KAAK,EAAL,GAAU,EAAf,CAAlB,CAAX;AACA,MAAIY,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAYX,OAAO,IAAI,KAAK,EAAL,GAAU,EAAd,CAAR,IAA+B,KAAK,EAApC,CAAX,CAAZ;AACA,MAAIa,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYX,OAAO,IAAK,KAAK,EAAV,CAAR,GAAyB,EAApC,CAAd;AACA,MAAIc,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWX,OAAO,GAAG,EAArB,CAAX;AACA,MAAIN,SAAS,GAACe,IAAI,GAAG,IAAP,GAAcG,KAAd,GAAsB,IAAtB,GAA6BC,OAA7B,GAAuC,IAAvC,GAA8CC,IAA9C,GAAqD,IAAnE;AACA,SAAOpB,SAAP;AACD;;AAED,IAAMP,MAAM,GAAG4B,UAAU,CAACC,MAAX,CAAkB;AAC7B5B,EAAAA,SAAS,EAAE;AACT6B,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADkB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { Button, StyleSheet, Text, View } from 'react-native';\n\nexport default class Timer extends React.Component{\n    static navigationOptions = {title: 'Timer'};\n    render(){\n      const { navigate, state } =this.props.navigation;\n      let listoftimes=state.params.listoftimes.map(min=>min*60)\n      let end= Date.now()// +sum*60*1000 //insert func that gets end of array\n      return(\n        <View style={styles.container}>\n        <Text> Study session until {end.toLocaleString()} </Text>\n        <NewTimer listoftimes={listoftimes}/>\n        <Button\n           title= \"Before you start, make a to do list!\"\n           onPress={() => navigate('Checklist')}\n\n       />\n        <StatusBar style=\"auto\" />\n        </View>\n      )\n    }\n}\n\n\nconst NewTimer =(props)=>{\n  let timertext = \"  \"\n  const [buttonClicked, setButtonClicked] = useState(false);\n  const [timeLeft, setTimeLeft]= useState(timertext); //initializes timer text\n\n\n  let i=0 //counter of number of sessions\n  let seconds= props.listoftimes[i]//time left on timer in seconds\n\n  useEffect(()=>{ let x = setInterval(()=>{ //function that repeats every second\n        if (buttonClicked){\n          if (seconds<0){ //when timer ends\n              if (i== props.listoftimes.length-1){\n                clearInterval(x);//not sure if this needs to be here\n                timertext=\"done\";\n              }\n              else{ //when switching to next chunk of time\n                i++;\n                seconds= props.listoftimes[i]; //resets timer\n                timertext=\"switch what you are doing\";\n                //insert push notification here\n              }\n            }\n          else{ //normal timer running\n            timertext=timeLeftCalculator(seconds);\n          }\n          seconds --\n        }\n        else if (timertext==\"Hasn't Started\"){\n          timertext=\" \" //this is easier than making it say \"Paused\"\n        }\n        setTimeLeft(timertext);\n      },1000); //the 1000 is what makes it repeat every second\n    return () => clearInterval(x);},[buttonClicked]);\n  //{(i%2) ? \"take a break\"  : \"do work!\"} //this will work when i is a state\n\n  //things that are a problem:\n  //when you pause, and then unpause, it restarts.\n  //solution: make the time a state.\n  //problem with that: parent is a class, which can't use hooks\n  return(\n    <>\n      <Button\n        onPress={()=>{\n          setButtonClicked(!buttonClicked);\n        }}\n        disabled={buttonClicked}\n        title={buttonClicked ? \"Pause\" : \"Start\"}\n      />\n      <Text>{timeLeft} </Text>\n    </>\n  )\n}\n\nconst ProgressBar=(props)=>{\n  const [numSections, setNumSections]= useState(0); //initializes timer text\n  return(\n    <Text>{numSections} done! </Text>\n  )\n}\n\nfunction timeLeftCalculator(seconds){\n  let days = Math.floor(seconds / ( 60 * 60 * 24));\n  let hours = Math.floor((seconds % (60 * 60 * 24)) / ( 60 * 60));\n  let minutes = Math.floor((seconds % ( 60 * 60)) / 60);\n  let secs = Math.floor(seconds % 60 );\n  let timertext=days + \"d \" + hours + \"h \" + minutes + \"m \" + secs + \"s \"\n  return timertext;\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  });\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Timer.js\",\n    _this2 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport useInterval from '@use-it/interval';\nimport Notification from \"./Notification\";\nimport SlidingUpPanel from 'rn-sliding-up-panel';\nimport Checklist from \"./Checklist\";\nimport GamePanel from \"./GamePanel\";\nimport { ScrollView } from 'react-native-gesture-handler';\n\nvar NotifyUser = function NotifyUser(props) {\n  if (props.notify == true) {\n    props.setNotify(false);\n    Notification();\n  }\n\n  return null;\n};\n\nvar status = true;\nvar animatedValue1 = new Animated.Value(0);\nvar animatedValue2 = new Animated.Value(0);\n\nvar Timer = function (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer() {\n    _classCallCheck(this, Timer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Timer, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var createTwoButtonAlert = function createTwoButtonAlert() {\n        return Alert.alert(\"Are you sure you would like to leave?\", \"Leaving will reset everything\", [{\n          text: \"Cancel\",\n          onPress: function onPress() {\n            return console.log(\"Cancel Pressed\");\n          },\n          style: \"cancel\"\n        }, {\n          text: \"OK\",\n          onPress: function onPress() {\n            return navigate('Questionnaire');\n          }\n        }], {\n          cancelable: false\n        });\n      };\n\n      var _this$props$navigatio = this.props.navigation,\n          navigate = _this$props$navigatio.navigate,\n          state = _this$props$navigatio.state;\n      var listoftimes = state.params.listoftimes.map(function (min) {\n        return min * 60;\n      });\n      var sum = listoftimes.reduce(function (accumulator, currentValue) {\n        return accumulator + currentValue;\n      }, 0);\n      var end = Date.now() + sum * 1000;\n\n      if (status == true) {\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }\n        }, \" Study session until \", end.toLocaleString(), \" \"), React.createElement(NewTimer, {\n          listoftimes: listoftimes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }\n        }), React.createElement(Button, {\n          title: \"Reset timer\",\n          onPress: createTwoButtonAlert,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }\n        }), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this._firstPanel.show();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 69\n          }\n        }, \"Open First Panel\")), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this._secondPanel.show();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 69\n          }\n        }, \"Open Second Panel\")), React.createElement(SlidingUpPanel, {\n          draggableRange: {\n            top: 600,\n            bottom: 0\n          },\n          ref: function ref(c) {\n            return _this._firstPanel = c;\n          },\n          animatedValue: animatedValue1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: styles.slidingPanelContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }\n        }, React.createElement(Checklist, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }\n        }))), React.createElement(SlidingUpPanel, {\n          draggableRange: {\n            top: 600,\n            bottom: 0\n          },\n          ref: function ref(c) {\n            return _this._secondPanel = c;\n          },\n          animatedValue: animatedValue2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: styles.slidingPanelContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }\n        }, React.createElement(GamePanel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }\n        }))));\n      } else {\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }\n        }, \" Study session until \", end.toLocaleString(), \" \"), React.createElement(NewTimer, {\n          listoftimes: listoftimes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }\n        }), React.createElement(Button, {\n          title: \"Reset timer\",\n          onPress: createTwoButtonAlert,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }\n        }), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this._firstPanel.show();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 69\n          }\n        }, \"Open First Panel\")), React.createElement(SlidingUpPanel, {\n          draggableRange: {\n            top: 600,\n            bottom: 0\n          },\n          ref: function ref(c) {\n            return _this._firstPanel = c;\n          },\n          animatedValue: animatedValue1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: styles.slidingPanelContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }\n        }, React.createElement(Checklist, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }\n        }))));\n      }\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nTimer.navigationOptions = {\n  title: 'Timer',\n  headerLeft: function headerLeft() {\n    return null;\n  }\n};\nexport { Timer as default };\n\nvar NewTimer = function NewTimer(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      buttonClicked = _useState2[0],\n      setButtonClicked = _useState2[1];\n\n  var _useState3 = useState(\"Hasn't Started\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      timeAlert = _useState4[0],\n      setTimeAlert = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      i = _useState6[0],\n      setI = _useState6[1];\n\n  var _useState7 = useState(props.listoftimes[i]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      seconds = _useState8[0],\n      setSeconds = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      notify = _useState10[0],\n      setNotify = _useState10[1];\n\n  useInterval(function () {\n    if (!buttonClicked) return;\n\n    if (seconds > 1) {\n      setSeconds(seconds - 1);\n      setTimeAlert(i % 2 ? \"take a break\" : \"do work!\");\n      return;\n    }\n\n    if (i === props.listoftimes.length - 1) {\n      setTimeAlert(\"done\");\n      setButtonClicked(false);\n    } else {\n      setNotify(true);\n      setSeconds(props.listoftimes[i + 1]);\n      setI(i + 1);\n    }\n  }, 1000);\n  return React.createElement(React.Fragment, null, React.createElement(NotifyUser, {\n    notify: notify,\n    setNotify: setNotify,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      setButtonClicked(!buttonClicked);\n    },\n    title: buttonClicked ? \"Pause\" : \"Start\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, timeLeftCalculator(seconds), \" \"), React.createElement(Text, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, timeAlert, \" \"), React.createElement(ProgressBar, {\n    i: i,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar ProgressBar = function ProgressBar(props) {\n  return React.createElement(Text, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, props.i, \" sections done! (baby progress bar)\");\n};\n\nfunction timeLeftCalculator(seconds) {\n  var days = Math.floor(seconds / (60 * 60 * 24));\n  var hours = Math.floor(seconds % (60 * 60 * 24) / (60 * 60));\n  var minutes = Math.floor(seconds % (60 * 60) / 60);\n  var secs = Math.floor(seconds % 60);\n  var timertext = days + \"d \" + hours + \"h \" + minutes + \"m \" + secs + \"s \";\n  return timertext;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  slidingPanelContainer: {\n    flex: 1,\n    backgroundColor: '#FFF',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Timer.js"],"names":["StatusBar","React","useState","useEffect","useInterval","Notification","SlidingUpPanel","Checklist","GamePanel","ScrollView","NotifyUser","props","notify","setNotify","status","animatedValue1","Animated","Value","animatedValue2","Timer","createTwoButtonAlert","Alert","alert","text","onPress","console","log","style","navigate","cancelable","navigation","state","listoftimes","params","map","min","sum","reduce","accumulator","currentValue","end","Date","now","styles","container","toLocaleString","_firstPanel","show","_secondPanel","top","bottom","c","slidingPanelContainer","Component","navigationOptions","title","headerLeft","NewTimer","buttonClicked","setButtonClicked","timeAlert","setTimeAlert","i","setI","seconds","setSeconds","length","timeLeftCalculator","ProgressBar","days","Math","floor","hours","minutes","secs","timertext","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { Button, TouchableOpacity, StyleSheet, Text, View, Alert, Animated } from 'react-native';\nimport useInterval from '@use-it/interval';\nimport Notification from './Notification';\nimport SlidingUpPanel from 'rn-sliding-up-panel';\nimport Checklist from './Checklist';\nimport GamePanel from './GamePanel';\nimport { ScrollView } from 'react-native-gesture-handler';\n\nconst NotifyUser=(props)=>{\n  if(props.notify==true){\n   props.setNotify(false);\n   Notification();\n  }\n return null;\n}\n\nvar status =true;\nconst animatedValue1 = new Animated.Value(0);\nconst animatedValue2 = new Animated.Value(0);\nexport default class Timer extends React.Component{\n    static navigationOptions = {title: 'Timer',\n    headerLeft:()=> null};\n    render(){\n\n        const createTwoButtonAlert = () =>\n          Alert.alert(\n            \"Are you sure you would like to leave?\",\n            \"Leaving will reset everything\",\n            [\n              {\n                text: \"Cancel\",\n                onPress: () => console.log(\"Cancel Pressed\"),\n                style: \"cancel\"\n              },\n              { text: \"OK\", onPress: () => navigate('Questionnaire') }\n            ],\n            { cancelable: false }\n          );\n      const { navigate, state } =this.props.navigation;\n      let listoftimes=state.params.listoftimes.map(min=>min*60)//mins to seconds\n      //let listoftimes = [10,20,10,10]\n      let sum = listoftimes.reduce(\n        ( accumulator, currentValue ) => accumulator + currentValue\n      ,0)\n      let end= Date.now()+sum*1000 //this doesn't work\n      if(status==true){\n        return(\n          <View style={styles.container}>\n          <Text> Study session until {end.toLocaleString()} </Text>\n          <NewTimer listoftimes={listoftimes}/>\n          <Button title='Reset timer' onPress={createTwoButtonAlert}/>\n          <TouchableOpacity onPress={() => this._firstPanel.show()}><Text>Open First Panel</Text></TouchableOpacity>\n        <TouchableOpacity  onPress={() => this._secondPanel.show()}><Text>Open Second Panel</Text></TouchableOpacity>\n        <SlidingUpPanel\n          draggableRange={{ top: 600, bottom: 0 }} ref={(c) => this._firstPanel = c} animatedValue={animatedValue1}>\n          <View style={styles.slidingPanelContainer}>\n            <Checklist/>\n          </View>\n        </SlidingUpPanel>\n        <SlidingUpPanel\n           draggableRange={{ top: 600, bottom: 0 }} ref={(c) => this._secondPanel = c} animatedValue={animatedValue2}>\n          <View style={styles.slidingPanelContainer}>\n            <GamePanel/>\n          </View>\n        </SlidingUpPanel>\n          </View>\n        )\n      }\n      else{\n        return(\n          <View style={styles.container}>\n          <Text> Study session until {end.toLocaleString()} </Text>\n          <NewTimer listoftimes={listoftimes}/>\n          <Button title='Reset timer' onPress={createTwoButtonAlert}/>\n          <TouchableOpacity onPress={() => this._firstPanel.show()}><Text>Open First Panel</Text></TouchableOpacity>\n        <SlidingUpPanel\n          draggableRange={{ top: 600, bottom: 0 }} ref={(c) => this._firstPanel = c} animatedValue={animatedValue1}>\n          <View style={styles.slidingPanelContainer}>\n            <Checklist/>\n          </View>\n        </SlidingUpPanel>\n        </View>\n        )\n      }\n      \n    }\n}\n\n\nconst NewTimer =(props)=>{\n  const [buttonClicked, setButtonClicked] = useState(false);\n  const [timeAlert, setTimeAlert]= useState(\"Hasn't Started\");\n  const [i, setI]=useState(0) //counter of listoftimes\n  const [seconds,setSeconds]=useState(props.listoftimes[i])\n  const [notify, setNotify]=useState(false)\n\n  useInterval(()=>{\n    if (!buttonClicked) return\n    if(seconds>1){ //regular timer operations\n      setSeconds(seconds-1)\n      setTimeAlert((i%2) ? \"take a break\"  : \"do work!\")\n      return\n    }\n    if (i=== props.listoftimes.length-1){ //if end of timer\n      setTimeAlert(\"done\")\n      setButtonClicked(false)\n      //maybe clearInterval?\n    }\n    else{ //when switching to next timer HERERERER\n      setNotify(true)\n      setSeconds(props.listoftimes[i+1])\n      setI(i+1)\n    }\n\n  },1000)//makes it run every second\n\n  return(\n<>\n      <NotifyUser notify={notify} setNotify={setNotify}/>\n      <Button\n        onPress={()=>{\n          setButtonClicked(!buttonClicked);\n        }}\n        //disabled={buttonClicked}\n        title={buttonClicked ? \"Pause\" : \"Start\"}\n      />\n      <Text>{timeLeftCalculator(seconds)} </Text>\n      <Text>{timeAlert} </Text>\n      <ProgressBar i={i}/>\n\n </>\n  )\n\n}\n\nconst ProgressBar=(props)=>{\n  return(\n    <Text>{props.i} sections done! (baby progress bar)</Text>\n  )\n}\n\nfunction timeLeftCalculator(seconds){\n  let days = Math.floor(seconds / ( 60 * 60 * 24));\n  let hours = Math.floor((seconds % (60 * 60 * 24)) / ( 60 * 60));\n  let minutes = Math.floor((seconds % ( 60 * 60)) / 60);\n  let secs = Math.floor(seconds % 60 );\n  let timertext=days + \"d \" + hours + \"h \" + minutes + \"m \" + secs + \"s \"\n  return timertext;\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    slidingPanelContainer: {\n      flex: 1,\n      backgroundColor: '#FFF',\n      alignItems: 'center',\n    }\n  });\n"]},"metadata":{},"sourceType":"module"}
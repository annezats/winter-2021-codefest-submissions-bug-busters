{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nvar token;\nexport default function Notification() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  SendPushNotification();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n  return null;\n}\n\nfunction SendPushNotification() {\n  var message = {\n    to: token,\n    sound: 'default',\n    title: \"TIME'S UP\",\n    body: 'Please move to the next session!',\n    data: {\n      data: 'goes here'\n    }\n  };\n  fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(message)\n  });\n  console.log(\"PIG\");\n}\n\nfunction registerForPushNotificationsAsync() {\n  var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context2.next = 20;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context2.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context2.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context2.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context2.abrupt(\"return\");\n\n        case 15:\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context2.sent.data;\n          _context2.next = 21;\n          break;\n\n        case 20:\n          alert('Must use physical device for Push Notifications');\n\n        case 21:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context2.abrupt(\"return\", token);\n\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Notification.js"],"names":["React","Component","useState","useEffect","useRef","Notifications","Permissions","Constants","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","token","Notification","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","SendPushNotification","registerForPushNotificationsAsync","then","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","message","to","sound","title","body","data","fetch","method","headers","Accept","JSON","stringify","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\nvar token;\n\nexport default function Notification() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n    const [notification, setNotification] = useState(false);\n    const notificationListener = useRef();\n    const responseListener = useRef();\n\n    //Calling this function sends the actual Notification:\n    SendPushNotification();\n\n    useEffect(() => {\n      registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n  \n      // This listener is fired whenever a notification is received while the app is foregrounded\n      notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n        setNotification(notification);\n      });\n  \n      // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n        console.log(response);\n      });\n  \n      return () => {\n        Notifications.removeNotificationSubscription(notificationListener);\n        Notifications.removeNotificationSubscription(responseListener);\n\n      };\n    }, []);\n\n    return null;\n        }\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\n function SendPushNotification() {\n  const message = {\n    to: token,\n    sound: 'default',\n    title: \"TIME'S UP\",\n    body: 'Please move to the next session!',\n    data: { data: 'goes here' },\n  };\n\n     fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(message),\n    });\n    console.log(\"PIG\");\n\n}\n\nasync function registerForPushNotificationsAsync() {\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n  return token;\n}"]},"metadata":{},"sourceType":"module"}
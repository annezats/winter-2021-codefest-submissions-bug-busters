{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Checklist.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\n\nvar CheckBox = function CheckBox() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var changeBoxStatus = function changeBoxStatus() {\n    return setSelected(!selected);\n  };\n\n  return React.createElement(TouchableOpacity, {\n    style: [styles.checkBox],\n    onPress: changeBoxStatus,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    size: 30,\n    color: '#211f30',\n    name: selected ? 'check-box' : 'check-box-outline-blank',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"type here\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar Checklist = function (_React$Component) {\n  _inherits(Checklist, _React$Component);\n\n  var _super = _createSuper(Checklist);\n\n  function Checklist() {\n    _classCallCheck(this, Checklist);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Checklist, [{\n    key: \"render\",\n    value: function render() {\n      var rows = [];\n\n      for (var i = 0; i < 10; i++) {\n        rows.push(React.createElement(CheckBox, {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 19\n          }\n        }));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, \"Things to do:\"), rows);\n    }\n  }]);\n\n  return Checklist;\n}(React.Component);\n\nChecklist.navigationOptions = {\n  title: 'Checklist'\n};\nexport { Checklist as default };\nvar styles = StyleSheet.create({\n  checkBox: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/annezats/Desktop/CODE/winter-2021-codefest-submissions-bug-busters/app/components/Checklist.js"],"names":["React","useState","useEffect","Icon","CheckBox","selected","setSelected","changeBoxStatus","styles","checkBox","Checklist","rows","i","push","Component","navigationOptions","title","StyleSheet","create","flexDirection","alignItems"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;;;;;;;;AAEA,OAAOC,IAAP;;AAEA,IAAMC,QAAQ,GAAE,SAAVA,QAAU,GAAI;AAAA,kBACkBH,QAAQ,CAAC,KAAD,CAD1B;AAAA;AAAA,MACPI,QADO;AAAA,MACGC,WADH;;AAEd,MAAMC,eAAe,GAAC,SAAhBA,eAAgB;AAAA,WAAKD,WAAW,CAAC,CAACD,QAAF,CAAhB;AAAA,GAAtB;;AAEA,SACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAACG,MAAM,CAACC,QAAR,CAAzB;AAA4C,IAAA,OAAO,EAAEF,eAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AACI,IAAA,IAAI,EAAE,EADV;AAEI,IAAA,KAAK,EAAE,SAFX;AAGI,IAAA,IAAI,EAAGF,QAAQ,GAAG,WAAH,GAAiB,yBAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAMI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF;AAWL,CAfD;;IAiBqBK,S;;;;;;;;;;;;;6BAGT;AACN,UAAIC,IAAI,GAAC,EAAT;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,EAAhB,EAAmBA,CAAC,EAApB,EAAuB;AACrBD,QAAAA,IAAI,CAACE,IAAL,CAAU,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAED,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAV;AACD;;AACD,aACE,0CACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADA,EAECD,IAFD,CADF;AAMD;;;;EAdkCX,KAAK,CAACc,S;;AAAxBJ,S,CACVK,iB,GAAoB;AAACC,EAAAA,KAAK,EAAE;AAAR,C;SADVN,S;AAmBrB,IAAMF,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC7BT,EAAAA,QAAQ,EAAE;AACNU,IAAAA,aAAa,EAAE,KADT;AAENC,IAAAA,UAAU,EAAE;AAFN;AADmB,CAAlB,CAAf","sourcesContent":["import React , {useState, useEffect} from 'react'\nimport { StyleSheet, TouchableOpacity, TextInput, Text, View,ScrollView, Button } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons'\n\nconst CheckBox =()=>{\n      const [selected, setSelected] = useState(false);\n      const changeBoxStatus=()=> setSelected(!selected)\n\n      return(\n        <TouchableOpacity style={[styles.checkBox]} onPress={changeBoxStatus}>\n            <Icon\n                size={30}\n                color={'#211f30'}\n                name={ selected ? 'check-box' : 'check-box-outline-blank'}\n            />\n            <TextInput placeholder=\"type here\"/>\n        </TouchableOpacity>\n      )\n\n}\n\nexport default class Checklist extends React.Component {\n    static navigationOptions = {title: 'Checklist'};\n\n    render(){\n      var rows=[];\n      for (var i=0; i<10;i++){\n        rows.push(<CheckBox key={i}/>); //makes ten rows of checkbox lines\n      }\n      return(\n        <>\n        <Text>Things to do:</Text>\n        {rows}\n        </>\n      )\n    };\n\n}\n\n\nconst styles = StyleSheet.create({\n    checkBox: {\n        flexDirection: 'row',\n        alignItems: 'center'\n    }\n})\n"]},"metadata":{},"sourceType":"module"}
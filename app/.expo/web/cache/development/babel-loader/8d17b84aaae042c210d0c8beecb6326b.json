{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/mming/Desktop/winter-2021-codefest-submissions-bug-busters/app/components/Questionnaire.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport DropDownPicker from 'react-native-dropdown-picker';\n\nvar Questionnaire = function (_React$Component) {\n  _inherits(Questionnaire, _React$Component);\n\n  var _super = _createSuper(Questionnaire);\n\n  function Questionnaire() {\n    var _this;\n\n    _classCallCheck(this, Questionnaire);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      hours: 0,\n      mins: 0,\n      breaks: 0,\n      breakTimes: 0,\n      workTimes: 0\n    };\n\n    _this.handleHours = function (text) {\n      _this.setState({\n        hours: parseInt(text)\n      });\n    };\n\n    _this.handleMins = function (text) {\n      _this.setState({\n        mins: parseInt(text)\n      });\n    };\n\n    _this.handleBreaks = function (text) {\n      _this.setState({\n        breaks: parseInt(text)\n      });\n    };\n\n    _this.handleBreakTimes = function (text) {\n      _this.setState({\n        breakTimes: parseInt(text)\n      });\n    };\n\n    _this.handleWorkTimes = function () {\n      var i = 60 * _this.state.hours + _this.state.mins;\n      var j = _this.state.breaks * _this.state.breakTimes;\n      var k = i - j;\n      k = k / (_this.state.breaks + 1);\n\n      _this.setState({\n        workTimes: k\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Questionnaire, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var navigate = this.props.navigation.navigate;\n      var list = [];\n\n      for (var i = 0; i < this.state.breaks * 2 + 1; i++) {\n        if (i % 2 == 0) {\n          list.push(this.state.workTimes);\n        } else {\n          list.push(this.state.breakTimes);\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, React.createElement(DropDownPicker, {\n        items: [{\n          label: '45 mins',\n          value: 45\n        }, {\n          label: '1 hour',\n          value: 60\n        }, {\n          label: '1 hour 15 mins',\n          value: 75\n        }, {\n          label: '2 hour 30 mins',\n          value: 150\n        }],\n        containerStyle: {\n          height: 40\n        },\n        dropDownStyle: {\n          marginTop: 2\n        },\n        placeholder: \"Select number of minutes\",\n        onChangeItem: function onChangeItem(item) {\n          _this2.setState({\n            hours: parseInt(Math.floor(item.value / 60)),\n            mins: parseInt(item.value % 60)\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      })), React.createElement(React.Fragment, null, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, React.createElement(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Enter number of hours\",\n        placeholderTextColor: \"#9a73ef\",\n        autoCapitalize: \"none\",\n        onChangeText: this.handleHours,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 12\n        }\n      }), React.createElement(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Enter number of minutes\",\n        placeholderTextColor: \"#9a73ef\",\n        autoCapitalize: \"none\",\n        onChangeText: this.handleMins,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 12\n        }\n      }), React.createElement(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Number of Sections\",\n        placeholderTextColor: \"#9a73ef\",\n        autoCapitalize: \"none\",\n        onChangeText: this.handleBreaks,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 12\n        }\n      }), React.createElement(TextInput, {\n        style: styles.input,\n        keyboardType: \"numeric\",\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Length of Sections\",\n        placeholderTextColor: \"#9a73ef\",\n        autoCapitalize: \"none\",\n        onChangeText: this.handleBreakTimes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 12\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.submitButton,\n        onPress: function onPress() {\n          return _this2.handleWorkTimes();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 12\n        }\n      }, React.createElement(Text, {\n        style: styles.submitButtonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, \" Submit \"))), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, this.state.workTimes), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, list), React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 12\n        }\n      }, React.createElement(Button, {\n        title: \"Go to Timer Screen\",\n        onPress: function onPress() {\n          return navigate('Timer');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 16\n        }\n      }))));\n    }\n  }]);\n\n  return Questionnaire;\n}(React.Component);\n\nQuestionnaire.navigationOptions = {\n  title: 'Questionnaire'\n};\nexport { Questionnaire as default };\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 23\n  },\n  input: {\n    margin: 15,\n    height: 40,\n    borderColor: '#7a42f4',\n    borderWidth: 1\n  },\n  submitButton: {\n    backgroundColor: '#7a42f4',\n    padding: 10,\n    margin: 15,\n    height: 40\n  },\n  submitButtonText: {\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["/home/mming/Desktop/winter-2021-codefest-submissions-bug-busters/app/components/Questionnaire.js"],"names":["React","DropDownPicker","Questionnaire","state","hours","mins","breaks","breakTimes","workTimes","handleHours","text","setState","parseInt","handleMins","handleBreaks","handleBreakTimes","handleWorkTimes","i","j","k","navigate","props","navigation","list","push","label","value","height","marginTop","item","Math","floor","styles","container","input","submitButton","submitButtonText","Component","navigationOptions","title","StyleSheet","create","paddingTop","margin","borderColor","borderWidth","backgroundColor","padding","color"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet, TouchableOpacity, TextInput, Text, View, Button } from 'react-native';\nimport DropDownPicker from 'react-native-dropdown-picker'\nexport default class Questionnaire extends React.Component{\n   static navigationOptions = {title: 'Questionnaire'};\n   state = {\n    hours: 0,\n    mins: 0,\n    breaks: 0,\n    breakTimes:0,\n    workTimes:0\n }\n\n handleHours = (text) => {\n    this.setState({ hours: parseInt(text) })\n    //console.log(text)\n }\n handleMins = (text) => {\n    this.setState({ mins: parseInt(text) })\n }\n handleBreaks = (text) => {\n    this.setState({ breaks: parseInt(text) })\n }\n handleBreakTimes = (text) => {\n    this.setState({ breakTimes: parseInt(text) })\n }\n handleWorkTimes = () => {\n    //console.log(this.state.hours)\n    //console.log(this.state.mins)\n    //console.log(this.state.breaks)\n    //console.log(this.state.breakTimes)\n    let i = 60 * this.state.hours + this.state.mins;\n    let j = this.state.breaks * this.state.breakTimes;\n    let k = i-j;\n    //console.log(k)\n    k= k/(this.state.breaks+1);\n    this.setState({workTimes:k})\n    //console.log(k);\n    //console.log(this.state.workTimes)\n }\n\n   render(){\n       const { navigate } = this.props.navigation; //props comes from App.js\n       let list = []; //array variable\n       for(let i=0;i<this.state.breaks*2+1;i++){\n          if(i%2==0){\n             list.push(this.state.workTimes)\n          }\n          else{\n             list.push(this.state.breakTimes)\n          }\n       }\n       return(\n          <>\n          <View>\n          <DropDownPicker\n          items={[\n{label: '45 mins', value: 45,},\n{label: '1 hour', value: 60, },\n{label: '1 hour 15 mins', value: 75,},\n{label: '2 hour 30 mins', value: 150,},\n]}\n\ncontainerStyle={{height: 40}}\ndropDownStyle={{marginTop: 2}}\n           placeholder=\"Select number of minutes\"\n       //    items={this.state.mins}\n          onChangeItem={(item)=>{this.setState({\n             hours:parseInt(Math.floor(item.value/60)),\n             mins:parseInt(item.value%60)\n          })\n       }}\n       />\n          </View>\n        <>\n        <View style = {styles.container}>\n           <TextInput style = {styles.input}\n          keyboardType=\"numeric\"\n              underlineColorAndroid = \"transparent\"\n              placeholder = \"Enter number of hours\"\n              placeholderTextColor = \"#9a73ef\"\n              autoCapitalize = \"none\"\n              onChangeText = {this.handleHours}/>\n           <TextInput style = {styles.input}\n          keyboardType=\"numeric\"\n              underlineColorAndroid = \"transparent\"\n              placeholder = \"Enter number of minutes\"\n              placeholderTextColor = \"#9a73ef\"\n              autoCapitalize = \"none\"\n              onChangeText = {this.handleMins}/>\n\n           <TextInput style = {styles.input}\n          keyboardType=\"numeric\"\n              underlineColorAndroid = \"transparent\"\n              placeholder = \"Number of Sections\"\n              placeholderTextColor = \"#9a73ef\"\n              autoCapitalize = \"none\"\n              onChangeText = {this.handleBreaks}/>\n           <TextInput style = {styles.input}\n          keyboardType=\"numeric\"\n              underlineColorAndroid = \"transparent\"\n              placeholder = \"Length of Sections\"\n              placeholderTextColor = \"#9a73ef\"\n              autoCapitalize = \"none\"\n              onChangeText = {this.handleBreakTimes}/>\n           <TouchableOpacity\n              style = {styles.submitButton}\n              onPress = {\n                 () => this.handleWorkTimes()\n              }>\n              <Text style = {styles.submitButtonText}> Submit </Text>\n           </TouchableOpacity>\n        </View>\n        <Text>\n        {this.state.workTimes}\n        </Text>\n        <Text>\n        {list}\n        </Text>\n\n           <View style = {styles.container}>\n               <Button\n                  title= \"Go to Timer Screen\"\n                  onPress={() => navigate('Timer')}\n              />\n           </View>\n           </>\n           </>\n       )\n   }\n}\nconst styles = StyleSheet.create({\n    container: {\n       paddingTop: 23\n    },\n    input: {\n       margin: 15,\n       height: 40,\n       borderColor: '#7a42f4',\n       borderWidth: 1\n    },\n    submitButton: {\n       backgroundColor: '#7a42f4',\n       padding: 10,\n       margin: 15,\n       height: 40,\n    },\n    submitButtonText:{\n       color: 'white'\n    }\n });\n"]},"metadata":{},"sourceType":"module"}